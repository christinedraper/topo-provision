require 'chef/provisioning/aws_driver'

#### THIS RECIPE IS AUTO-GENERATED BY TOPO-PROVISION - EDITS WILL BE OVERWRITTEN ####


with_driver('aws:christine')
with_machine_options({:bootstrap_options=>{:key_name=>"test1_aws", :instance_type=>"t1.micro", :associate_public_ip_address=>true}, :ssh_username=>"ubuntu"})


load_balancer "appserver-elb" do
  load_balancer_options({:listeners=>[{:port=>3001, :protocol=>"HTTP", :instance_port=>3001, :instance_protocol=>"HTTP"}], :availability_zones=>["us-west-2c", "us-west-2a", "us-west-2b"]})
end


machine "dbserver-aws1" do
  run_list(["recipe[testapp::db]"])
  tags([])
  attribute 'topo', {"node_type"=>"dbserver", "name"=>"inttest1"} 
end


machine_image "testappserver-aws1_image" do
  run_list(["recipe[apt]", "recipe[testapp::appserver]", "recipe[testapp::deploy]"])
  chef_environment("test")
  tags(["test"])
  attribute 'topo', {"node_type"=>"appserver", "name"=>"inttest1"} 
  attribute 'test_top_level_bool', true 
  attribute 'test_top_level_num', 2 
  attribute 'testapp', lazy{
    topo_search_node_fn = Proc.new { |node, path| 
      result = search(:node, "name:" + node, :filter_result => { 'val' => path }).first
      result['val'] if result 
    }
    {'user' => "ubuntu", 'path' => "/var/opt", 'test_bool' => false, 'test_num' => 5.4, 'db_location' => topo_search_node_fn.call("dbserver-aws1", ["ipaddress"]), 'test_ref' => topo_search_node_fn.call("dbserver-aws1", ["apt", "cacher-client", "restrict_environment"])}
   } 
  add_machine_options({:bootstrap_options=>{:instance_type=>"t1.micro"}})
end


aws_launch_configuration "testappserver-aws1_config" do
  image("testappserver-aws1_image")
  options({:instance_type=>"t1.micro"})
end


aws_auto_scaling_group "testappserver-aws1_group" do
  launch_configuration("testappserver-aws1_config")
  max_size(2)
  min_size(1)
  desired_capacity(1)
  availability_zones(["us-west-2c", "us-west-2a", "us-west-2b"])
  load_balancers(["appserver-elb"])
end

